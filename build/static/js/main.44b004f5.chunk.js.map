{"version":3,"sources":["containers/landingPage/LandingPage.js","containers/assemble/Assemble.js","redux/reducer.js","App.js","serviceWorker.js","index.js","containers/assemble/Assemble.module.css"],"names":["LandingPage","React","Component","PartDesc","props","className","classes","partDesc","name","alt","src","DescriptionBox","descriptionBox","Part","partName","Assemble","container","sideNav","parts","desc","reducer","actions","type","store","createStore","App","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"4TAYeA,E,uKARP,OACI,+C,GAHcC,IAAMC,W,gBCC1BC,EAAW,SAAAC,GACb,OACI,yBAAKC,UAAWC,IAAQC,UACpB,6BACI,6BAAMH,EAAMI,MACZ,+DAIJ,yBACAC,IAAI,WACJC,IAAI,qEAMVC,EAAgB,SAACP,GACnB,OACI,yBAAKC,UAAWC,IAAQM,gBACpB,kBAAC,EAAD,CAAUJ,KAAK,UACf,kBAAC,EAAD,CAAUA,KAAK,UACf,kBAAC,EAAD,CAAUA,KAAK,YAMrBK,EAAO,SAAAT,GACT,OACI,yBAAKC,UAAWC,IAAQQ,UAAxB,SA4BOC,E,uKApBP,OACI,yBAAKV,UAAWC,IAAQU,WACpB,yBAAKX,UAAWC,IAAQW,SACpB,yBAAKZ,UAAWC,IAAQY,OACpB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGR,6BACI,yBAAKb,UAAWC,IAAQa,MAChB,kBAAC,EAAD,CAAgBX,KAAK,e,GAd1BP,IAAMC,WC5BdkB,EAPC,WAAkC,IAAXC,EAAU,uCACtCA,EAAQC,MCKbC,EAAQC,YAAYJ,GA6BXK,MA3Bf,WACE,OACE,kBAAC,IAAD,CAAUF,MAAOA,GACf,yBAAKlB,UAAU,OACX,kBAAC,IAAD,KACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CACIqB,KAAK,YACLC,OAAO,EACPC,OAAQ,SAACxB,GAAD,OACN,kBAAC,EAAYA,MAGjB,kBAAC,IAAD,CACEsB,KAAK,IACLC,OAAO,EACPC,OAAQ,SAACxB,GAAD,OACN,kBAAC,EAAgBA,WCjBbyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BC,EAAOC,QAAU,CAAC,UAAY,4BAA4B,QAAU,0BAA0B,KAAO,uBAAuB,MAAQ,wBAAwB,SAAW,2BAA2B,eAAiB,iCAAiC,SAAW,8B","file":"static/js/main.44b004f5.chunk.js","sourcesContent":["import React from 'react';\n\nclass LandingPage extends React.Component{\n    render(){\n        return(\n            <div>\n                helo world\n            </div>\n        );\n    }\n}\n\nexport default LandingPage;","import React from 'react';\nimport classes from './Assemble.module.css';\n\nconst PartDesc = props=>{\n    return (\n        <div className={classes.partDesc}>\n            <div>\n                <div>{props.name}</div>\n                <p>\n                    This is a sample description...\n                </p>\n            </div>            \n            <img \n            alt=\"imagePic\" \n            src=\"https://wiki.kerbalspaceprogram.com/images/c/c1/Oscar-B_FT.png\"\n            />                        \n        </div>\n    );\n}\n\nconst DescriptionBox =(props)=>{\n    return(\n        <div className={classes.descriptionBox}>    \n            <PartDesc name=\"desc1\"/>\n            <PartDesc name=\"desc1\"/>\n            <PartDesc name=\"desc1\"/>           \n        </div>\n    );    \n}\n\n\nconst Part = props=>{\n    return(\n        <div className={classes.partName}>\n            Nose\n        </div>\n    );\n}\n\nclass Assemble extends React.Component{\n    render(){\n        return(\n            <div className={classes.container}>\n                <div className={classes.sideNav}>\n                    <div className={classes.parts}>\n                        <Part/>\n                        <Part/>\n                        <Part/>\n                        <Part/>\n                    </div>                    \n                </div>\n                <div>\n                    <div className={classes.desc}>\n                            <DescriptionBox name=\"abc\"/>                        \n                    </div>                    \n                </div>                \n            </div>\n        );\n    }\n}\n\nexport default Assemble;","const initialState = {\n    a : 0\n};\n\nconst reducer = (state = initialState, actions)=>{\n    switch(actions.type){\n\n    }\n\n}\n\nexport default reducer;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport {createStore} from 'redux';\nimport LandingPage from './containers/landingPage/LandingPage';\nimport Asseble from './containers/assemble/Assemble';\nimport reducer from './redux/reducer';\n\n\nconst store = createStore(reducer);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">    \n          <Router>\n          <Switch>         \n          <Route\n              path='/assemble'\n              exact={true}\n              render={(props) => (      \n                <Asseble {...props}/>        \n              )}\n            />\n            <Route\n              path='/'\n              exact={true}\n              render={(props) => (      \n                <LandingPage {...props}/>        \n              )}\n            />            \n          </Switch>  \n        </Router>\n      </div>\n    </Provider>    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Assemble_container__2V_Il\",\"sideNav\":\"Assemble_sideNav__3IjjG\",\"desc\":\"Assemble_desc__Iqbaa\",\"parts\":\"Assemble_parts__XS-K6\",\"partName\":\"Assemble_partName__UgHHf\",\"descriptionBox\":\"Assemble_descriptionBox__20HuM\",\"partDesc\":\"Assemble_partDesc__1KY2H\"};"],"sourceRoot":""}